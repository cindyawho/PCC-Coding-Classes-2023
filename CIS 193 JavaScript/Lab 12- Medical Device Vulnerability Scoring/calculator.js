function updateScore() {
	//~~~~~~~~~~~~~~~~~Step 1~~~~~~~~~~~~~//
    //Download the three calculator files. 

    //~~~~~~~~~~~~~~~~~Step 2 Enact the function!~~~~~~~~~~~~~//
    let groupArr = ["AV", "AC", "PR", "UI", "scope", "conf", "integ", "avail", "health", "sens"];
    let checkRadio = [false, false, false, false, false, false, false, false, false, false];
    var i;
    for(i = 0; i < groupArr.length; i++){
        var rad = document.getElementsByName(groupArr[i]);
        for(var j = 0; j < rad.length; j++) {
            if(rad[j].checked) {
                checkRadio[i] = true;
            }
        }
    }
    let allChecked = 0;
    for(let m = 0; m < 10; m++){
        //console.log(checkRadio[m]);
        if(checkRadio[m] == true){
            allChecked++;
        }
    }
    if(allChecked == 10){
        timeToCalculate();
    } else{
        allChecked = 0;//reset
    }
}

//~~~~~~~~~~~~~~~~~Step 3~~~~~~~~~~~~~//
/*Using JavaScript, add a click or change event listener to each radio 
button. Do not add the event listener to the button label. */
let radioElement = document.getElementsByClassName("radioSelect");
document.addEventListener("click", updateScore); //on any click, it should enact update Score

//~~~~~~~~~~~~~~~~~Step 8 Computing the Scores~~~~~~~~~~~~~//
/*Once one button from each property is selected, the webpage should
- Hide the warning label by setting the display style of the <div> with ID warning to none. Note: both none and hidden have similar visual effects, however none doesn't occupy any space, while hidden does occupy space, affecting the layout).
- Compute the vulnerability score.
- The score should be updated and displayed inside the <div> with ID score.
*/
function timeToCalculate() {
    var warningDiv = document.getElementById("warning"); //Step 4
    warningDiv.style.display = "none";

    let groupArr = ["AV", "AC", "PR", "UI", "scope", "conf", "integ", "avail", "health", "sens"];
    let selections = [];
    for(let i = 0; i < groupArr.length; i++){
        var rad = document.getElementsByName(groupArr[i]);
        for(var j = 0; j < rad.length; j++) {
            if(rad[j].checked) {
                selections[i] = rad[j].value;
            }
        }
    }

    let attVectSelection = selections[0];
    let attCompSelection = selections[1];
    let privReqSelection = selections[2];
    let userInterSelection = selections[3];
    let statusSelection = selections[4];
    let confSelection = selections[5];
    let intSelection = selections[6];
    let availSelection = selections[7];
    let healthImpSelection = selections[8];
    let sensSelection = selections[9];

    let sStatus = computeSStatus(statusSelection);

    let conf = computeConf(sensSelection, confSelection);
    let integ = computeInteg(healthImpSelection, intSelection);
    let avail = computeAvail(healthImpSelection, availSelection);
    let sBase = computeSBase(conf, integ, avail);
    
    let attVector = computeAttVector(attVectSelection);
    let attComplexity = computeAttComplexity(attCompSelection);
    let privReq = computePrivReq(privReqSelection);
    let userInter = computeUserInter(userInterSelection);
    let sExploit = computeSExploit(attVector, attComplexity, privReq, userInter);

    let display = (Math.round(computeScore(sStatus, sBase, sExploit)* 10) / 10).toFixed(1);
    var scoreDiv = document.getElementById("score"); //Step 4
    scoreDiv.innerHTML = display;
}


function computeScore(sStatus, sBase, sExploit){
    //console.log("sStatus:", sStatus);
    //console.log("sBase:", sBase);
    //console.log("sExploit:", sExploit);
    if(sBase == 0){
        return 0.0;
    }
    let unrounded = sStatus * ((3.326258289*sBase) + (1.1*sExploit));
    if(unrounded > 10){ //STEP 5
        return 10.0;
    }
    return (Math.ceil(unrounded * 10) / 10).toFixed(1); //Step 6
}

function computeSStatus(statusSelection){
    if(statusSelection == "scope_U"){
        return 1.0;
    } else {
        return 1.08;
    }
}

function computeSBase(conf, integ, avail){
    //console.log("conf:", conf);
    //console.log("integ:", integ);
    //console.log("avail:", avail);
    return conf + integ + avail;
}

function computeConf(sensSelection, confSelection){
    if(confSelection == "conf_N"){
        return 0.0;
    } else if(confSelection == "conf_L"){
        if(sensSelection == "sens_N"){
            return 0.22;
        } else if(sensSelection == "sens_L"){
            return 0.65;
        } else{
            return 0.85;
        }
    } else{
        if(sensSelection == "sens_N"){
            return 0.56;
        } else if(sensSelection == "sens_L"){
            return 0.75;
        } else{
            return 0.95;
        }
    }
}

function computeInteg(healthImpSelection, intSelection){
    //console.log("healthImpSelection:", healthImpSelection);
    //console.log("intSelection", intSelection);
    if(healthImpSelection == "health_N"){
        if(intSelection == "integ_N"){
            return 0.0;
        } else if(intSelection == "integ_L"){
            return 0.22;
        } else{
            return 0.56;
        }
    } else if(healthImpSelection == "health_L"){
        if(intSelection == "integ_N"){
            return 0.55;
        } else if(intSelection == "integ_L"){
            return 0.60;
        } else{
            return 0.75;
        }
    } else if(healthImpSelection == "health_H"){
        if(intSelection == "integ_N"){
            return 0.85;
        } else if(intSelection == "integ_L"){
            return 0.90;
        } else{
            return 0.95;
        }
    }
}

function computeAvail(healthImpSelection, availSelection){
    if(healthImpSelection == "health_N"){
        if(availSelection == "avail_N"){
            return 0.0;
        } else if(availSelection == "avail_L"){
            return 0.22;
        } else{
            return 0.56;
        }
    } else if(healthImpSelection == "health_N"){
        if(availSelection == "avail_N"){
            return 0.55;
        } else if(availSelection == "avail_L"){
            return 0.60;
        } else{
            return 0.65;
        }
    } else {
        if(availSelection == "avail_N"){
            return 0.85;
        } else if(availSelection == "avail_L"){
            return 0.90;
        } else{
            return 0.95;
        }
    }
    
}

function computeSExploit(attVector, attComplexity, privReq, userInter){
    return attVector*attComplexity*privReq*userInter;
}

function computeAttVector(attVectSelection){
    if(attVectSelection == "AV_N"){
        return 0.85;
    }
    else if(attVectSelection == "AV_A"){
        return 0.62;
    }
    else if(attVectSelection == "AV_L"){
        return 0.55
    }
    else{
        return 0.20;
    }
}

function computeAttComplexity(attCompSelection){
    if(attCompSelection == "AC_L"){
        return 0.77;
    }
    else if(attCompSelection == "AC_H"){
        return 0.44;
    }
}

function computePrivReq(privReqSelection){
    if(privReqSelection == "PR_N"){
        return 0.85;
    }
    else if(privReqSelection == "PR_L"){
        return 0.62;
    }
    else {
        return 0.27;
    }
}

function computeUserInter(userInterSelection){
    if(userInterSelection == "UI_N"){
        return 0.85;
    }
    else {
        return 0.62;
    }
}