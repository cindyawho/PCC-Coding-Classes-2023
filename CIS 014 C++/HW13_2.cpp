#include <iostream>
#include <unordered_set>
using namespace std;

/**
 * PURPOSE: see if the input can be generated by combining any 
 *          number of words in the dictionary
 * PARAMETERS: string input, the string we need to test
 *             string array dictionary, the collection of words to try to concatenate 
 * RETURN VALUE: boolean Solution, false if we can't, true if we can
*/ 
class Solution {
   public:
      bool isInputInDictionary(string* s, unordered_set<string> &dict);
};
bool Solution::isInputInDictionary(string* s, unordered_set<string> &dict) {
    // YOUR CODE HERE
    //cout << "String Input s: " << *s << endl; //joe
    string input = *s; //joe
    //cout << "String Input input: " << input << endl; //joe
    //Dictionary input:
    cout << "My Dictionary set contains:";
    for (const string& x : dict) {
        cout << x << " ";
    }
    cout << endl;
    //unordered_set<string> dictInput = dict;
    auto itr1 = dict.cbegin();
    //auto itr2 = dict.cbegin(1);
    cout << "itr1: " << *itr1 << endl;

    if(input.length() == 0){
        return true;
    }


    return false;
}
int main() {
  // Your solution may be tested as such, with different input values. You may create 
  // your own test cases
  Solution solution;
  string input = "joe";
  unordered_set<string> dict = {"joe1","joe"};
  cout << solution.isInputInDictionary(&input, dict);
}